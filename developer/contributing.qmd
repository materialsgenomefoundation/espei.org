---
title: "Contributing Guide"
---

This is the place to start as a new ESPEI contributor. This guide
assumes you have
`installed a development version of ESPEI <installing-development-versions>`{.interpreted-text
role="ref"}.

The next sections lay out the basics of getting an ESPEI development set
up and the development standards. Then the
`Software design`{.interpreted-text role="ref"} sections walk through
the key parts of the codebase.

## Tests

Even though much of ESPEI is devoted to being a multi-core, stochastic
user tool, we strive to test all logic and functionality. We are
continuously maintaining tests and writing tests for previously untested
code. As a general rule, any time you write a new function or modify an
existing function you should write or maintain a test for that function.

Some tips for testing:

-   Ideally you would practicing test driven development by writing
    tests of your intended results before you write the function.
-   If possible, keep the tests small and fast.
-   See the [NumPy/SciPy testing
    guidelines](https://github.com/numpy/numpy/blob/master/doc/TESTS.rst.txt)
    for more tips.

### Running Tests

ESPEI uses [pytest](https://pytest.org) as a test runner. The tests can
be run from the root directory of the cloned repository:

``` bash
pytest
```

## Style

### Code style

For most naming and style, follow
[PEP8](https://www.python.org/dev/peps/pep-0008/). One exception to PEP8
is regarding the line length, which we suggest a 120 character maximum,
but may be longer within reason.

### Code documentation

ESPEI uses the [NumPy
documentation](https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt)
style. All functions and classes should be documented with at least a
description, parameters, and return values, if applicable.

Using `Examples` in the documentation is especially encouraged for
utilities that are likely to be run by users. See
`espei.analysis.truncate_arrays`{.interpreted-text role="py:func"} for
an example.

### Web documention

Documentation on ESPEI is split into user tutorials, reference and
developer documentation.

-   Tutorials are resources for users new to ESPEI or new to certain
    features of ESPEI to be *guided* through typical actions.
-   Reference pages should be concise articles that explain how to
    complete specific goals for users who know what they want to
    accomplish.
-   Developer documentation should describe what should be considered
    when contributing source code back to ESPEI.

You can check changes you make to the documentation by going to the
documentation folder in the root repository `cd docs/`. Running the
command
`make html && cd build/html && python3 -m http.server && cd ../.. && make clean`
from that folder will build the docs and run them on a local HTTP
server. You can see the documentation when the server is running by
visting the URL at the end of the output, usually
`localhost port 8000 <http://0.0.0.0:8000>`\_. When you are finished,
type `Ctrl-C` to stop the server and the command will clean up the build
for you.

Make sure to fix any warnings that come up if you are adding
documentation.

#### Building Documentation

The docs can be built by running the docs/Makefile (or docs/make.bat on
Windows). Then Python can be used to serve the html files in the \_build
directory and you can visit `http://localhost:8000` in your broswer to
see the built documentation.

For Unix systems:

``` bash
cd docs
make html
cd _build/html
python -m http.server
```

Windows:

``` bash
cd docs
make.bat html
cd _build\html
python -m http.server
```

## Logging

Since ESPEI is intended to be run by users, we must provide useful
feedback on how their runs are progressing. ESPEI uses the logging
module to allow control over verbosity of the output.

There are 5 different logging levels provided by Python. They should be
used as follows:

Critical or Error (`logging.critical` or `logging.error`)

:   Never use these. These log levels would only be used when there is
    an unrecoverable error that requires the run to be stopped. In that
    case, it is better to `raise` an appropriate error instead.

Warning (`logging.warning`)

:   Warnings are best used when we are able to recover from something
    bad that has happened. The warning should inform the user about
    potentially incorrect results or let them know about something they
    have the potential to fix. Again, anything unrecoverable should not
    be logged and should instead be raised with a good error message.

Info (`logging.info`)

:   Info logging should report on the progress of the program. Usually
    info should give feedback on milestones of a run or on actions that
    were taken as a result of a user setting. An example of a milestone
    is starting and finishing parameter generation. An example of an
    action taken as a result of a user setting is the logging of the
    number of chains in an mcmc run.

Debug (`logging.debug`)

:   Debugging is the lowest level of logging we provide in ESPEI. Debug
    messages should consist of possibly useful information that is
    beyond the user\'s direct control. Examples are the values of
    initial parameters, progress of checking datasets and building phase
    models, and the acceptance ratios of MCMC iterations.

::: {#citations}

[Bocklund2019]{#Bocklund2019 .citation-label}

:   Bocklund *et al.*, MRS Communications 9(2) (2019) 1--10.
    <doi:%6010.1557/mrc.2019.59>
    \<<https://doi.org/10.1557/mrc.2019.59>\>\`\_

[Coughanowr1991]{#Coughanowr1991 .citation-label}

:   Coughanowr *et al.*, Assessment of the Cu-Mg system. Zeitschrift
    f{ü}r Met. 82, 574--581 (1991).

[Dinsdale1991]{#Dinsdale1991 .citation-label}

:   Dinsdale, Calphad 15(4) (1991) 317-425,
    <doi:%6010.1016/0364-5916(91)90030-N>
    \<<https://doi.org/10.1016/0364-5916(91)90030-N>\>\`\_

[Lukas2007]{#Lukas2007 .citation-label}

:   Lukas, Fries, and Sundman, Computational Thermodynamics: The Calphad
    Method. (Cambridge University Press, 2007).
    <doi:%6010.1017/CBO9780511804137>
    \<<https://doi.org/10.1017/CBO9780511804137>\>\`\_

[Marker2018]{#Marker2018 .citation-label}

:   Marker *et al.*, Computational Materials Science 142 (2018) 215-226.
    <doi:%6010.1016/j.commatsci.2017.10.016>
    \<<https://doi.org/10.1016/j.commatsci.2017.10.016>\>\`\_

[Otis2016]{#Otis2016 .citation-label}

:   Otis, Ph.D. Dissertation, The Pennsylvania State University (2016).
    <https://etda.libraries.psu.edu/catalog/s1784k73d>

[Otis2017]{#Otis2017 .citation-label}

:   Otis *et al.*, JOM 69 (2017) <doi:%6010.1007/s11837-017-2318-6>
    \<<http://doi.org/10.1007/s11837-017-2318-6>\>\`\_

[Roslyakova2016]{#Roslyakova2016 .citation-label}

:   Roslyakova *et al.*, Calphad 55 (2016) 165--180.
    <doi:%6010.1016/j.calphad.2016.09.001>
    \<<https://doi.org/10.1016/j.calphad.2016.09.001>\>\`\_

[Shang2010]{#Shang2010 .citation-label}

:   Shang, Wang, and Liu, Magnes. Technol. 2010 617-622 (2010).

[Zhou2007]{#Zhou2007 .citation-label}

:   Zhou *et al.*, J. Phase Equilibria Diffus. 28, 158--166 (2007).
    <doi:%6010.1007/s11669-007-9022-0>
    \<<https://doi.org/10.1007/s11669-007-9022-0>\>\`\_

[Zuo1993]{#Zuo1993 .citation-label}

:   Zuo and Chang, Zeitschrift f{ü}r Met. 84, 662--667 (1993).
:::
